[
    {
        "Target Usage": "",
        "Name": "Component Composition Framework DSE",
        "Short Description": "",
        "Documentation": {
            "Description": "\n\n<h3>\n Basic Concepts\n</h3>\n\n<p>\n The idea is you allow the CCF to combine the components being developed based on the interfaces that these components individually implement. The CCF will do this based on its internal composition service. For example, when the CCF is running, this allows you to simply add a .dll file to a components folder and have it connect to the already running components that it can connect with.\n</p>\n\n\n<h3>\n Basic Design Principles\n</h3>\n\n<p>\n Components implementing IComponent is managed and connected by the Composition Service as appropriate.\n</p>\n\n\n",
            "Copyright": "\n<p>\n Copyright \u00a9 2014 by FINESCE\n</p>\n\n\n",
            "Glossary": "\n<ul>\n <li>\n  GE     Generic Enabler\n </li>\n <li>\n  NGSI   Next Generation Service Interfaces\n </li>\n <li>\n  DSE    Domain Specific Enabler\n </li>\n <li>\n  CCF    Component Composition Framework\n </li>\n</ul>\n\n\n",
            "References": "\n<p>\n NGSI FIWARE (\n <a class=\"external\" href=\"https://forge.fiware.org/plugins/mediawiki/wiki/fiware/index.php/FI-WARE_NGSI_Open_RESTful_API_Specification\">\n  FI-WARE_NGSI_Open_RESTful_API_Specification\n </a>\n )\n</p>\n\n\n",
            "Details": "\n<p>\n In order to implement a Component, one must implement the IComponent interface:\n</p>\n\n<p>\n <img alt=\"\" src=\"images/redmine/PIC.png\"/>\n</p>\n\n<p>\n The starting point for any Component is the \u201cStart\u201d method, which is called by the Composition Service when it is determined the Component should be started. The Name and Description properties are strictly for debugging purposes.\n</p>\n\n<p>\n If the IComponent must allow other components to communicate with it, it can implement the IConnectableComponent interface:\n</p>\n\n<p>\n <img alt=\"\" src=\"images/redmine/PIC2.png\"/>\n</p>\n\n<p>\n Notice that the IComponentCommunication interface does not require any implementation. It is up to the user to define the methods on an interface that extends from this, that can be exposed to other IComponents.\n</p>\n\n<p>\n Finally, we have an interface that allows for a components to connect to another components. This interface is called IConntingComponent&lt;TComponentCommunication&gt; and can be seen below:\n</p>\n\n<p>\n <img alt=\"\" src=\"images/redmine/PIC3.png\"/>\n</p>\n\n<p>\n This is a generic interface of the IComponentCommunication implementation the IComponent must connect to.\n</p>\n\n<p>\n NOTE: The NGSI9-producer component that comes with the CCF already implements the IConnectableComponent interface.\n</p>\n\n<p>\n The Composition Service will manage all registered IComponent implementations and connect them as appropriate.\n</p>\n\n\n",
            "Preface": "\n<p>\n Within this document you find a self-contained open specification of the aforementioned Domain Specific Enabler (DSE).\n</p>\n\n<p>\n Please consult the appropriate pages on the\n <a class=\"external\" href=\"http://www.finesce.eu/Trial_Site_Ireland.html\">\n  FINESCE\n </a>\n website in order to understand the complete context of the related FINESCE trials and this DSE.\n</p>\n\n\n",
            "ReutilisedTech": "\n<p>\n Communicates NGSI9 with the publish subscriber context broker and has been tested with the Orion Context Broker.\n</p>\n\n\n"
        },
        "WP": "",
        "Terms and Conditions": "\n<p>\n Software associated to the CCF is provided as open source under the Apache2 license\n</p>\n\n\n",
        "wiki_attachments": [
            "/redmine/attachments/download/2321/PIC3.png",
            "/redmine/attachments/download/2322/PIC2.png",
            "/redmine/attachments/download/2323/PIC.png"
        ],
        "Open Source": "",
        "Contact Person": "\n<p>\n Troels Lund Rasmussen (\n <a class=\"external\" href=\"http://insero.com/en/about-us/contact/employees-and-management-team/troels-lund-rasmussen/\">\n  Link\n </a>\n )\n <br/>\n Insero Software\n</p>\n\n",
        "Overview": "\n\n<h3>\n What you get\n</h3>\n\n<p>\n The CCF is a plugin-based framework (developed in .NET, C#) that allows you to inject your own implemented components into a composition service that manages and connects all running components dynamically.\n</p>\n\n<p>\n In addition the CCF comes with an NGSI9 producer component that any other component can hook itself up against, allowing the CCF to send NGSI9 context updates without requiring the developer knowing the NGSI9 protocol.\n</p>\n\n\n<h3>\n Why to get it\n</h3>\n\n<p>\n A quick way to make existing components NGSI9 enabled using the already implemented NGSI9-producer component.\n</p>\n\n\n",
        "Downloads": "\n<p>\n It is available on GitHub (\n <a class=\"external\" href=\"https://github.com/insero-software/component-composition-framework/\">\n  Link\n </a>\n )\n</p>\n\n\n",
        "Instances": "\n<p>\n An instance of this DSE\u2019s reference implementation runs as a part of the trial and is not publicly accessible.\n</p>\n\n\n"
    }
]