[
    {
        "Last Update": "2015-09-08",
        "Target Usage": "",
        "Name": "Event Sink (EvSi) DSE",
        "Short Description": "",
        "Documentation": {
            "Description": "\n\n<h3>\n Basic Concepts\n</h3>\n\n<p>\n The EvSi DSE interfaces to a locally installed Orion Publish/ Subscribe Context Broker used to aggregate local events and forward them to the cloud. Whereas it is desirable to use all events and information online (i.e. on FIWARE LAB), a lot of companies still rather prefer to store their sensitive data offline on their own servers. EvSi DSE allows for a simple way to store all information locally, only using established Open Source-software.\n</p>\n\n<p>\n Note: With version 2.0 of the EvSi DSE the codebase has been moved from originally C#.NET and MS SQL to Node.JS and MongoDB. This change with accompanied by exchaning the Gateway Data Handling GE on the factory shopfloor with an on-premise Orion Context Broker. The legacy code can be found on\n <a class=\"external\" href=\"https://github.com/FINESCE/OBDC-Event-Sink-EvSi-DSE\">\n  GitHub\n </a>\n .\n</p>\n\n\n<h3>\n Basic Design Principles\n</h3>\n\n<p>\n During installation, EvSi establishes a connection to both the local instance of Orion and the MongoDB for persistent storage, as shown below.\n</p>\n\n<p>\n <img alt=\"Signal flow during runtime\" src=\"images/redmine/FINESCE_EvSi_Signal-Flow_Runtime.png\" title=\"Signal flow during runtime\" class=img-responsive />\n</p>\n\n<p>\n During runtime then, events in Orion are forwarded through and thanks to EvSi to the MongoDB an stored there.\n</p>\n\n<p>\n <img alt=\"Signal flow during installation\" src=\"images/redmine/FINESCE_EvSi_Signal-Flow_Installation.png\" title=\"Signal flow during installation\" class=img-responsive />\n</p>\n\n\n<h3>\n DSE Interwork\n</h3>\n\n<p>\n As the goal of the EvSi DSE is to keep a local, on-premise copy of the information pushed through a local Orion northbound to the FIWARE Lab Cloud infrastructure, it directly connects to the local instance of Orion. As shown in the architecture chart below, information from the Factory Network are gathered through the Modbus Connector and forwarded to the local instance of Orion via NGSI. The local Orion instance is the interface to the northbound interface to the cloud infrastructure, and therefore submits context updates (mostly sensor readings and machine notifications) and receives aggregated context information from the cloud (mostly complex events produced by the Complex Event Processing).\n</p>\n\n<p>\n The DSE Event Sink (EvSi) simply subscribes all contexts on the local instance of Orion via the NGSI protocol. Then the local Orion pushes all events unidirectional to EvSi, which in turn stores the raw information in a local MongoDB. This local MongoDB then can be accessed by other local applications.\n</p>\n\n<p>\n <img alt=\"Sample architecture as image\" src=\"images/redmine/FINESCE_EvSi_Sample-Arch.png\" title=\"Sample architecture as image\" class=img-responsive />\n</p>\n\n\n<h3>\n GE Dependancies\n</h3>\n\n<ul>\n <li>\n  <a class=\"external\" href=\"http://catalogue.fi-ware.org/enablers/publishsubscribe-context-broker-orion-context-broker\">\n   Orion Context Broker\n  </a>\n  \u2014 Events being published on Orion should be stored using EvSi\n  <br/>\n  h2. Detailed Specifications\n </li>\n</ul>\n\n\n",
            "Copyright": "\n<p>\n Copyright \u00a9 2015 by FINESCE\n</p>\n\n\n",
            "Glossary": "\n<ul>\n <li>\n  OBDC: Open Database Connectivity\n </li>\n <li>\n  <acronym title=\"ful\">\n   REST\n  </acronym>\n  : Representational State Transfer\n </li>\n <li>\n  API: Application programming interface\n </li>\n</ul>\n\n\n",
            "References": "\n<ul>\n <li>\n  OBDC:\n  <a class=\"external\" href=\"http://en.wikipedia.org/wiki/ODBC\">\n   http://en.wikipedia.org/wiki/ODBC\n  </a>\n </li>\n <li>\n  REST:\n  <a class=\"external\" href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\">\n   http://en.wikipedia.org/wiki/Representational_state_transfer\n  </a>\n </li>\n <li>\n  API:\n  <a class=\"external\" href=\"http://en.wikipedia.org/wiki/Application_programming_interface\">\n   http://en.wikipedia.org/wiki/Application_programming_interface\n  </a>\n </li>\n</ul>\n\n\n",
            "Details": "",
            "Preface": "\n<p>\n Within this document you find a self-contained open specification of the aforementioned Domain Specific Enabler (DSE).\n</p>\n\n<p>\n Please consult the appropriate pages on the\n <a class=\"external\" href=\"http://www.finesce.eu/Trial_Site_Ireland.html\">\n  FINESCE\n </a>\n website in order to understand the complete context of the related FINESCE trials and this DSE.\n</p>\n\n\n",
            "ReutilisedTech": "\n<ul>\n <li>\n  <a class=\"external\" href=\"https://nodejs.org/\">\n   Node.js\n  </a>\n  \u2014 JavaScript framework to run code on service side\n </li>\n <li>\n  <a class=\"external\" href=\"https://www.npmjs.com/\">\n   NPM\n  </a>\n  \u2014 Node Package Manager handels Node.JS modules\n </li>\n <li>\n  <a class=\"external\" href=\"https://www.mongodb.org/\">\n   MongoDB\n  </a>\n  \u2014 NoSQL document-oriented database\n </li>\n <li>\n  Offers a RESTful HTTP API\n </li>\n</ul>\n\n\n"
        },
        "Version": "2.0 \u2014 latest and entirely updated stable of EvSi based on NodeJS and MongoDB. Any previous version deprecated.",
        "WP": "",
        "Usage": "\n<p>\n IMPORTANT: we kindly remind you that this software module is strictly tied to the use of ORION Context Broker GE thus meaning that you should have previously set up an ORION instance of yours. Please have a look at ORION GE documentation at the following link:\n <a class=\"external\" href=\"http://catalogue.fi-ware.org/enablers/publishsubscribe-context-broker-orion-context-broker\">\n  publishsubscribe-context-broker-orion-context-broker\n </a>\n</p>\n\n\n<h3>\n Requirements\n</h3>\n\n<p>\n Following software is required for EvSi to work and needs to be installed beforehand:\n</p>\n\n<ul>\n <li>\n  <a class=\"external\" href=\"http://catalogue.fi-ware.org/enablers/publishsubscribe-context-broker-orion-context-broker\">\n   Orion Context Broker\n  </a>\n  \u2014 v4.1 or higher \u2014 Events being published on Orion should be stored using EvSi\n </li>\n <li>\n  <a class=\"external\" href=\"https://nodejs.org/\">\n   Node.js\n  </a>\n  \u2014 v0.12.x or higher \u2014 JavaScript framework to run code on service side\n </li>\n <li>\n  <a class=\"external\" href=\"https://www.npmjs.com/\">\n   NPM\n  </a>\n  \u2014 v2.x or higher \u2014 Node Package Manager handels Node.JS modules\n </li>\n <li>\n  <a class=\"external\" href=\"https://www.mongodb.org/\">\n   MongoDB\n  </a>\n  \u2014 v3.x or higher \u2014 NoSQL document-oriented database\n </li>\n</ul>\n\n\n<h3>\n Installation\n</h3>\n\n<p>\n Installation of EvSi is straightforward, after all required software (listed above) is installed:\n</p>\n\n<ol>\n <li>\n  Check out the repository from GitHub (repo linked in \u00abDownloads\u00bb)\n </li>\n <li>\n  Navigate to the folder where you checked out the repo, and run \u00abnpm install\u00bb. This downloads Mongoose, a NPM module to connect to MongoDB.\n </li>\n <li>\n  Open \u00abconfig.json\u00bb and configure everything for your environment:\n  <ul>\n   <li>\n    server/port: The port you want to listen to (required later)\n   </li>\n   <li>\n    mongo/url: The URL where your MongoDB can be reached\n   </li>\n   <li>\n    info/source: String denominator used in the database schema to identify several EvSi instances\n   </li>\n  </ul>\n </li>\n <li>\n  You can now run EvSi with the command \u00abnode listen.js\u00bb from the console\n </li>\n <li>\n  Now we need to configure Orion so that informs EvSi whenever there is a new event. For that, we can easily create a JSON command which we can send via curl to our instance of Orion. An example with the FIWARE LAB global instance of Orion is given in \u00absubscribe-to-events\u00bb in the GitHub repo.\n </li>\n <li>\n  To test the setup, you can use the example in the repo in the file \u00abpush-new-event\u00bb\n </li>\n</ol>\n\n\n<h3>\n Maintenance and codebase\n</h3>\n\n<p>\n Node.js (and JavaScript) code is not compiled and therefore can be adopted easily. Just alter the given functionality in \u00ablisten.js\u00bb if alternative behavior is required.\n</p>\n\n\n<h3>\n Database schema\n</h3>\n\n<p>\n Events stored in the MongoDB are structured in the following way (JSON notation):\n</p>\n\n<pre>\n{\n   eventObject: Original event processed by Orion,\n   source: Identifier of source as defined in config,\n   timestamp: time and date of storage of event in milliseconds (UNIX time)\n}\n</pre>\n\n\n<h3>\n Usage Examples\n</h3>\n\n<p>\n There is one dominant use case of the use of EvSi: local storage of context updates for later reference.\n</p>\n\n<p>\n If the target architecture consists of distributed local network zones, such it is the case with a number of production factories with their own local network, it is a reasonable approach to instantiate one local Orion Context Broker in each network zone to gather the local context updates. These local Orions in turn forward their information to global instance hosted in a cloud infrastructure, e.g. FIWARE Lab Cloud. If architecture designers have the requirement to store information locally, may it be for compliance, research or analysis information, they need to set up an additional data storage and connect it to the local Orion.\n</p>\n\n<p>\n This can be performed by deployed the DSE EvSi, which is a light-weight and performant component to connect Orion to a persistent MongoDB storage. In this way, it acts similar to Cygnus, but stores information to a MongoDB.\n</p>\n\n\n",
        "Terms and Conditions": "\n<p>\n Software associated to the EvSi DSE is provided as open source under the Apache2 license. Please check the specific terms and conditions linked to this open source license at\n <a class=\"external\" href=\"http://www.apache.org/licenses/LICENSE-2.0\">\n  http://www.apache.org/licenses/LICENSE-2.0\n </a>\n .\n</p>\n\n\n",
        "wiki_attachments": [
            "/redmine/attachments/download/2875/FINESCE_EvSi_Sample-Arch.png",
            "/redmine/attachments/download/2876/FINESCE_EvSi_Sample-Arch.pptx",
            "/redmine/attachments/download/2964/FINESCE_EvSi_Signal-Flow_Runtime.png",
            "/redmine/attachments/download/2965/FINESCE_EvSi_Signal-Flow.pptx",
            "/redmine/attachments/download/2966/FINESCE_EvSi_Signal-Flow_Installation.png"
        ],
        "Open Source": "",
        "Contact Person": "\n<p>\n Julian Krenge\n <br/>\n FIR at RWTH Aachen University\n <br/>\n <a class=\"email\" href=\"mailto:Julian.KrengeREMOVE-NO-SPAM@fir.rwth-aachen.de\">\n  Julian.KrengeREMOVE-NO-SPAM@fir.rwth-aachen.de\n </a>\n</p>\n\n\n",
        "Overview": "\n\n<h3>\n What you get\n</h3>\n\n<p>\n Main purpose of the DSE Event Sink is keeping a local copy of all the information forwarded to the FIWARE LAB cloud infrastructure.\n</p>\n\n\n<h3>\n Why to get it\n</h3>\n\n<p>\n This is because of the current demand of manufacturing companies to have all data and information on premise, as they perceive cloud storage as potential security breach. EvSi therefore allows for storing the gathered information locally as well. However, for running a full-powered application it is recommended to use FIWARE's full capability in the cloud. EvSi therefore should rather be seen as an on-premise backup and logging module.\n</p>\n\n\n",
        "Downloads": "\n<p>\n Available on\n <a class=\"external\" href=\"https://github.com/FINESCE/fiware-orion-accumulator\">\n  GitHub\n </a>\n</p>\n\n<p>\n Node.js code does not need to be compiled. For installation instructions see \u00abInstallation and usage examples\u00bb.\n</p>\n\n\n",
        "Instances": "\n<p>\n An instance of this DSE\u2019s reference implementation runs as a part of the trial and is not publicly accessible.\n</p>\n\n\n"
    }
]