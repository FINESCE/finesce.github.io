[
    {
        "Target Usage": "",
        "Name": "Integration kit DSE",
        "Short Description": "",
        "Documentation": {
            "Description": "\n\n<h3>\n Basic Concepts\n</h3>\n\n<p>\n - HDFS is a distributed file system used by Hadoop\n <br/>\n - Hadoop is a framework for storing and processing data-sets\n <br/>\n - Hive is built on top of Hadoop to provide data summarization, query, and analysis\n <br/>\n - Map Reduce is the programming model used to process and analyze data\n <br/>\n - REST-API is an interface for performing creation/updates/deletion of data within another machine\n <br/>\n - Cygnus connector is based on Flume and is used to interconnect Orion to Cosmos\n <br/>\n - Integration Packages are the pieces within API Proxy that handles a specific integration\n <br/>\n - JSON is a standardized format for transferring data\n</p>\n\n\n<h3>\n Basic Design Principles\n</h3>\n\n<p>\n The main principles of designing the integration has been to keep each functionality as one piece, and make these as versatile and easily integrated with the others as possible. This can be seen within the API Proxy, where each Integration Package holds code for handling that specific integration. Any general code that is useful for several packages is placed in a Core Package.\n <br/>\n The \u201cclean cuts\u201d between functionalities provide a more adaptable and versatile integration, as it makes it easier to alter, add or remove functionalities without this having much or any effect on the remaining integration. The aim is also to make the integration as slim and efficient as possible. This to make the solution as easily transferred and loaded as possible, and efficiently runnable even in smaller environments. This will be done by avoiding duplication of code, and attempting to keep the code as short and simple as possible, of course, without affecting the quality.\n</p>\n\n\n",
            "Copyright": "\n<p>\n Copyright \u00a9 2014 by FINESCE\n</p>\n\n\n",
            "Glossary": "\n<p>\n API \u2013 Application Programming Interface\n <br/>\n DSE \u2013 Domain Specific Enabler\n</p>\n\n\n",
            "References": "\n\n",
            "Details": "\n<p>\n The integration between API Proxy and Orion ContextBroker is conducted entirely via the REST API interface of Orion, hosted by the Orion Context Broker on port 1026. See Image 2.\n</p>\n\n<p>\n <img alt=\"\" src=\"images/redmine/Image_2.jpg\"/>\n</p>\n\n<p>\n By using Apache Camel we can configure API Proxy to retrieve new data from any of its data sources at any time interval of our choice. When API Proxy gets new data for analysis, it automatically converts the data to a JSON-formatted entity, in accordance to the specifications of Orion Context Broker, and send it to Orion. See Image 3.\n</p>\n\n<p>\n <img alt=\"\" src=\"images/redmine/Image_3.jpg\"/>\n</p>\n\n<p>\n In the code above (see Image 4) we make batches Entities (ContextElements) that will be sent to Orion. We put them in batches to minimize the amount of calls to the REST API, although we chose to limit the batch size to a maximum of 5 since we noticed Orion and subsequent parts of the integration had trouble coping with larger batches. This is also the reason we add a delay when sending, Orion would skip some of the data we sent if we pushed them without delay.\n</p>\n\n<p>\n <img alt=\"\" src=\"images/redmine/Image_4.jpg\"/>\n</p>\n\n<p>\n On line number 69 we forward our data to a method called postToNGSI (depicted below). This method establishes a HTTP connection to Orion Context Broker REST API and applies the JSON-formatted data to a POST request. If the request is successful, the method returns a boolean value of true.\n</p>\n\n<p>\n A subscription has been set up within Orion Context Broker using the Cygnus Connector, for all entities of a certain type, in this example; all users. The subscription is set up in a similar way as the persistence is done, a HTTP POST request is sent, specifying what type the subscription is for. More on setting up the subscription can be found in Orion's documentation at\n <a class=\"external\" href=\"http://catalogue.fi-ware.org/enablers/publishsubscribe-context-broker-orion-context-broker\">\n  publishsubscribe-context-broker-orion-context-broker\n </a>\n and the Connector documentation at\n <a class=\"external\" href=\"https://github.com/telefonicaid/fiware-connectors/tree/develop/flume\">\n  flume\n </a>\n . See Image 5.\n</p>\n\n<p>\n <img alt=\"\" src=\"images/redmine/Image_5.jpg\"/>\n</p>\n\n<p>\n The subscription triggers an action in Cygnus Connector; to persist the entity to Cosmos Big Data Analysis, where it end up in our project's space in Cosmos as a JSON-formatted file. From here, analysis can be made using a custom map reduce job. However, in order to make powerful analytical processing, we chose to use R (\n <a class=\"external\" href=\"http://cran.r-project.org/\">\n </a>\n ). Cosmos currently does not support this, so in order to do this, we have chosen to make a HiveClient in Orion (review documentation for Cosmos on this topic at\n <a class=\"external\" href=\"http://catalogue.fi-ware.org/enablers/bigdata-analysis-cosmos\">\n  bigdata-analysis-cosmos\n </a>\n ). Our HiveClient is built in java and allows us to access our HDFS-space from Orion Context Broker. Since we have full permissions in our Orion instance, we can here install R and run R via our HiveClient. Once our HiveClient has produced a result, this is returned to API Proxy.\n</p>\n\n\n<h3>\n Address/Protocol\n</h3>\n\n\n<h3>\n Commands\n</h3>\n\n\n<h3>\n Endpoints\n</h3>\n\n\n",
            "Preface": "\n<p>\n Within this document you find a self-contained open specification of the aforementioned Domain Specific Enabler (DSE).\n</p>\n\n<p>\n Please consult the appropriate pages on the\n <a class=\"external\" href=\"http://www.finesce.eu/Trial_Site_Ireland.html\">\n  FINESCE\n </a>\n website in order to understand the complete context of the related FINESCE trials and this DSE.\n</p>\n\n\n",
            "ReutilisedTech": "\n<p>\n The WP1 DSE re-uses FIWARE GE\u2019s Orion Context Broker and Cosmos BigData Analysis.\n</p>\n\n<p>\n Google GSON \u2013 a JSON Parsing library for Java\n <a class=\"external\" href=\"https://code.google.com/p/google-gson/\">\n </a>\n <br/>\n Apache Camel - a rule-based routing and mediation engine\n <a class=\"external\" href=\"http://camel.apache.org/\">\n </a>\n</p>\n\n\n"
        },
        "WP": "",
        "Terms and Conditions": "\n<p>\n Open source under the Apache2 license.\n</p>\n\n\n",
        "wiki_attachments": [
            "/redmine/attachments/download/2220/Image_1.png",
            "/redmine/attachments/download/2221/Image_2.jpg",
            "/redmine/attachments/download/2222/Image_3.jpg",
            "/redmine/attachments/download/2223/Image_4.jpg",
            "/redmine/attachments/download/2224/Image_5.jpg"
        ],
        "Open Source": "",
        "Contact Person": "\n<p>\n David Lillienberg, E.ON,\n <a class=\"email\" href=\"mailto:david.lillienbergREMOVE-NO-SPAM@eon.se\">\n  david.lillienbergREMOVE-NO-SPAM@eon.se\n </a>\n</p>\n\n",
        "Overview": "\n<p>\n The WP1 Integration kit is an integration implementation kit including some examples for the established integrations within WP1. This will help others to more easily and quickly establish those integrations. The kit will fit into the architecture as illustrated below (Image 1).\n</p>\n\n<p>\n <img alt=\"\" src=\"images/redmine/Image_1.png\"/>\n</p>\n\n<p>\n The WP1 architecture consists of, but not limited to:\n <br/>\n - The E.ON API Proxy which serves as the main integrator and core point of our architecture. The E.ON API Proxy integrates the Portfolio Manager, the FINESCE API and the FINESCE GE's.\n <br/>\n - The Portfolio Manager provides data to E.ON API Proxy through a REST API. The data is then forwarded to either the FINESCE GE's for analysis, or the FINESCE API for publishing.\n <br/>\n - The FINESCE API publishes data from the E.ON API Proxy to its users as a Odata API, currently available types are weather and price.\n <br/>\n - The FIWARE GE's integrated thus far is Orion Context Broker and Cosmos BigData Analysis.\n</p>\n\n<p>\n Orion Context Broker serves as the entry point of the FINESCE GE Cloud, where data to be analyzed is sent to the REST API Interface of Orion Context Broker. Through the subscription functionality of Orion Context Broker, data is automatically forwarded to Cosmos BigData Analysis, where analytical work is performed.\n</p>\n\n<p>\n The following DSE details reflect the current status of the WP1 DSE and may be subject to change.\n</p>\n\n<p>\n The integration consists of interconnecting the API Proxy, with the Orion Context Broker, and the Cosmos BigData Analysis. The purpose of the integration is for data that has been retrieved by API Proxy, to be analyzed within Cosmos Big Data Analysis, and then returned to API Proxy via Orion Context Broker. The analyzed data is then exposed from the API Proxy as an OData API for the outside world to access.\n</p>\n\n\n<h3>\n What you get\n</h3>\n\n<p>\n The DSE includes the following, but not limited to:\n <br/>\n - Experience gained by WP1 when integrating FIWARE Generic Enablers\n <br/>\n - Different integration kits developed by WP1\n <br/>\n - Sample code\n</p>\n\n\n<h3>\n Why to get it\n</h3>\n\n<p>\n Ideally this DSE will give valuable insights linked to FIWARE Generic Enablers to SME\u2019s and Start up\u2019s joining the FIWARE Accelerator Programme. In particular FIWARE GE\u2019s Orion Context Broker and Cosmos BigData Analysis.\n</p>\n\n\n<h3>\n Open Specifications\n</h3>\n\n\n",
        "Downloads": "\n<p>\n None.\n</p>\n\n\n",
        "Instances": "\n<p>\n An instance of this DSE\u2019s reference implementation runs as a part of the trial and is not publicly accessible.\n</p>\n\n\n"
    }
]