[
    {
        "Target Usage": "",
        "Name": "Metering (Metering2Orion **) ",
        "Short Description": "",
        "Documentation": {
            "Description": "\n\n<h3>\n Basic Concepts\n</h3>\n\n<p>\n Metering2Orion is a FINESCE WP4 software component which has been developed to accept metering data coming from an IoT gateway, subsequently translate these data into an NGSI10-compliant format (ORION context events or \u201centities\u201d) and finally publish it into an instance of ORION Context Broker.\n</p>\n\n<p>\n It consists of two sub-modules:\n <br/>\n \u2022    a Metering2Orion client-side sub-module (metering-input-client);\n <br/>\n \u2022    a Metering2Orion server-side sub-module (metering-input).\n</p>\n\n\n<h3>\n Basic Design Principles\n</h3>\n\n<p>\n The Metering2Orion client is a java library. The library establishes a connection to the Metering2Orion server part by means of encryption and authentication. Authentication credentials are stored inside configuration properties file included in the library; data objects will be sent through HTTPS protocol to the VM where the Metering2Orion server part resides.\n</p>\n\n<p>\n The information model maps the following data of the domain model:\n <br/>\n a)    Metering data, a measure of consumed/produced electric power retrieved every five minutes from each smart meter;\n <br/>\n b)    Load data, sample of cumulative consumption/production data retrieved every fifteen minutes from each smart meter.\n</p>\n\n<p>\n The class of the information model which \u201cstores\u201d the metering data is Meter.\n</p>\n\n<p style=\"text-align:center;\">\n <img alt=\"\" src=\"images/redmine/meter.png\"/>\n <br/>\n <strong>\n  Figure 1: Meter class\n </strong>\n</p>\n\n<p>\n Similarly, the class of the information model which \u201cstores\u201d the load data is Load.\n</p>\n\n<p style=\"text-align:center;\">\n <img alt=\"\" src=\"images/redmine/load.png\"/>\n <br/>\n <strong>\n  Figure 2: Load class\n </strong>\n</p>\n\n<p>\n The metering-input-client module contains a utility class that has to be referenced in order to let an external application interact with the trial IT infrastructure.\n</p>\n\n<p>\n There are four permitted operation:\n <br/>\n 1.    registerMeter \u2013 to register a new \u201cMeter\u201d entity to the infrastructure;\n <br/>\n 2.    sendMeterData \u2013 to send a new measure;\n <br/>\n 3.    registerLoad \u2013 to register a new \u201cLoad\u201d entity to the infrastructure;\n <br/>\n 4.    sendLoadData \u2013 to send a list of load samples (cumulative data).\n</p>\n\n<p style=\"text-align:center;\">\n <img alt=\"\" src=\"images/redmine/metering-input-client.png\"/>\n <br/>\n <strong>\n  Figure 3: Metering-input-client domain model\n </strong>\n</p>\n\n<p>\n The Metering2Orion server is a java web application exposing two REST methods (POST) which represents the callback URL used by the Metering2Orion client part to send the metering data received by an IoT gateway.\n <br/>\n These metering data are then manipulated and formatted as a ContextElement object to be passed to the ORION Context Broker.\n</p>\n\n<p>\n The following pictures give a snapshot of the java classes that have been developed for Metering2Orion.\n</p>\n\n<p style=\"text-align:center;\">\n <img alt=\"\" src=\"images/redmine/metering-input-client.png\"/>\n <br/>\n <strong>\n  Figure 4: Domain Model for Metering2Input (Meter)\n </strong>\n</p>\n\n<p style=\"text-align:center;\">\n <img alt=\"\" src=\"images/redmine/metering-input-client.png\"/>\n <br/>\n <strong>\n  Figure 5: Domain Model for Metering2Input (Load)\n </strong>\n</p>\n\n\n",
            "Copyright": "\n<p>\n Copyright \u00a9 2014 by FINESCE\n</p>\n\n\n",
            "Glossary": "\n\n",
            "References": "\n\n",
            "Details": "\n\n<h3>\n Metering2Orion (REST service named \"metering-input\")\n</h3>\n\n<p>\n IMPORTANT: we kindly remind you that this software module is strictly tight to the use of ORION Context Broker GE thus meaning that you should have previously set up an ORION instance of yours. Please have a look at ORION GE documentation at the following link\n <a class=\"external\" href=\"http://catalogue.fi-ware.org/enablers/publishsubscribe-context-broker-orion-context-broker\">\n  publishsubscribe-context-broker-orion-context-broker\n </a>\n</p>\n\n<p>\n Download the artefact (in the form a .war file) from the bottom of the page.\n <br/>\n Open the .war file (you can use an appropriate software like \u201cwinRar\u201d or \"7zip\"); open the  \u201cconfig.properties\u201ds file located in the following directory:  WEB-INF/classes/ and then amend the following configuration properties \u201cmeteringInput.orionServerUrl\u201d and \u201cmeteringInput.registerContexPath\u201d:\n</p>\n\n<p>\n meteringInput.orionServerUrl =\n <a class=\"external\" href=\"http://(your\">\n  (your\n </a>\n ORION instance URL):1026\n <br/>\n meteringInput.registerContexPath = NGSI10/updateContext\n</p>\n\n<p>\n These two extra parametres must be left blank as they are specific of FINESCE WP4 implementation\n <br/>\n meteringInput.meterDetailServerUrl =\n <br/>\n meteringInput.meterDetailPath =\n</p>\n\n<p>\n Save the changes to the .properties file and deploy the .war file on a Tomcat application server  using the \u201cTomcat Web Application Manager\u201d (see attached screenshot). We recommend you to use an updated version of Tomcat; we have used Apache Tomcat 7.xx.\n</p>\n\n<p style=\"text-align:center;\">\n <img alt=\"\" src=\"images/redmine/metering-input_deploy.jpg\" style=\"width:800px;\"/>\n <br/>\n <strong>\n  Figure 6: How to the deploy the metering-input .war file\n </strong>\n</p>\n\n\n\nTo verify that the deploy of the metering-input application was done successfully and that it consequently runs, you have to type either one of the following URLs in a common browser like Google Chrome or Microsoft Internet Explorer: \n\t<ul>\n <li>\n  <a class=\"external\" href=\"http://(your\">\n   (your\n  </a>\n  tomcat ip)/metering-input/rest/meterDataInput\n </li>\n <li>\n  <a class=\"external\" href=\"http://(your\">\n   (your\n  </a>\n  tomcat ip)/metering-input/rest/loadDataInput\n </li>\n</ul>\n\n<p>\n and you should get a page like the following (see attached screenshot).\n</p>\n\n<p style=\"text-align:center;\">\n <img alt=\"\" src=\"images/redmine/rest_meter.jpg\"/>\n <br/>\n <strong>\n  Figure 7: Test \"meterDataInput\" GET method in a browser\n </strong>\n</p>\n\n<p style=\"text-align:center;\">\n <img alt=\"\" src=\"images/redmine/rest_load.jpg\"/>\n <br/>\n <strong>\n  Figure 8: Test \"loadDataInput\" GET method in a browser\n </strong>\n</p>\n\n<p>\n If either of the previous pages appears, the metering-input application is correctly deployed.\n</p>\n\n\n\nYou can now send two different types of \"Meter reading\" to ORION\n\t<ul>\n <li>\n  a \"Meter\" (an instantaneous measure of power consumed/produced; measurements can be scheduled for example every five minutes)\n </li>\n <li>\n  a \"Load\" (a measure of the energy consumed/produced in a certain time range e.g. every 15 mins)\n </li>\n</ul>\n\n\n<h3>\n How to send \u201cMeter reading\u201d(s) (of type \"Meter\")\n</h3>\n\n<p>\n Now, in order to send a \u201cMeter reading\u201d (of type \"Meter\") to ORION, use a REST client such as DHC - REST/HTTP API Client chrome extension (see attached screenshot):\n</p>\n\n<p style=\"text-align:center;\">\n <img alt=\"\" src=\"images/redmine/chrome_M2O_Meter_REST_client_screenshot.png\" style=\"width:800px;\"/>\n <br/>\n <strong>\n  Figure 9: Send a \"Meter reading\" (of type \"Meter\") to ORION\n </strong>\n</p>\n\n<p>\n Please fill in with the following parametres:\n <br/>\n SERVICE (POST)\n <br/>\n <a class=\"external\" href=\"http://(your\">\n  (your\n </a>\n tomcat ip)/metering-input/rest/meterDataInput\n</p>\n\n<p>\n HEADERS\n <br/>\n Content-Type: application/xml\n</p>\n\n<p>\n BODY\n <br/>\n &lt;meter meterId=\"\n <em>\n  (unique identifier of the smart meter for which a measure has been retrieved)\n </em>\n \"\n <br/>\n isConcentrator=\"\n <em>\n  (flag to indicate whether a meter is a concentrator or not)\n </em>\n \"\n <br/>\n upstreamActivePower=\"\n <em>\n  (produced active power in W)\n </em>\n \"\n <br/>\n downstreamActivePower=\"\n <em>\n  (consumed active power in W)\n </em>\n \"\n <br/>\n RP_Q1=\"\n <em>\n  (Q1 reactive power expressed in VAR)\n </em>\n \"\n <br/>\n RP_Q2=\"\n <em>\n  (Q2 reactive power expressed in VAR)\n </em>\n \"\n <br/>\n RP_Q3=\"\n <em>\n  (Q3 reactive power expressed in VAR)\n </em>\n \"\n <br/>\n RP_Q4=\"\n <em>\n  (Q4 reactive power expressed in VAR)\n </em>\n \" /&gt;\n</p>\n\n<p>\n and finally click the SEND button.\n</p>\n\n<p>\n If you get 200 OK in the HTTP Response, you should have submitted a \u201cMeter reading\u201d (of type Meter) to ORION.\n</p>\n\n<p>\n To verify that a new \u201cMeter reading\u201d (of type Meter) has been saved into ORION, an entity of the following type should be created (or updated in case it already exists) in the NoSQL DB underlying ORION (i.e. MongoDB):\n{\n <br/>\n \"_id\" : {\n <br/>\n \"id\" : \"\n <em>\n  (unique identifier of the smart meter for which a measure has been retrieved)\n </em>\n \",\n <br/>\n \"type\" : \"Meter\"\n <br/>\n },\n <br/>\n \"attrs\" : [{\n <br/>\n \"name\" : \"isConcentrator\",\n <br/>\n \"type\" : \"boolean\",\n <br/>\n \"value\" : \"\n <em>\n  (flag to indicate whether a smart meter is a concentrator or not)\n </em>\n \",\n <br/>\n \"creDate\" :\n <em>\n  (date of attribute creation)\n </em>\n ,\n <br/>\n \"modDate\" :\n <em>\n  (date of attribute last update)\n </em>\n <br/>\n }, {\n <br/>\n \"name\" : \"upsteamActivePower\",\n <br/>\n \"type\" : \"kW\",\n <br/>\n \"value\" : \"\n <em>\n  (produced active power in W)\n </em>\n \",\n <br/>\n \"creDate\" :\n <em>\n  (date of attribute creation)\n </em>\n ,\n <br/>\n \"modDate\" :\n <em>\n  (date of attribute last update)\n </em>\n <br/>\n }, {\n <br/>\n \"name\" : \"downstreamActivePower\",\n <br/>\n \"type\" : \"kW\",\n <br/>\n \"value\" : \"\n <em>\n  (consumed active power in W)\n </em>\n \",\n <br/>\n \"creDate\" :\n <em>\n  (date of attribute creation)\n </em>\n ,\n <br/>\n \"modDate\" :\n <em>\n  (date of attribute last update)\n </em>\n <br/>\n }, {\n <br/>\n \"name\" : \"RP_Q1\",\n <br/>\n \"type\" : \"kVAR\",\n <br/>\n \"value\" : \"\n <em>\n  (Q1 reactive power expressed in VAR)\n </em>\n \",\n <br/>\n \"creDate\" :\n <em>\n  (date of attribute creation)\n </em>\n ,\n <br/>\n \"modDate\" :\n <em>\n  (date of attribute last update)\n </em>\n <br/>\n }, {\n <br/>\n \"name\" : \"RP_Q2\",\n <br/>\n \"type\" : \"kVAR\",\n <br/>\n \"value\" : \"\n <em>\n  (Q2 reactive power expressed in VAR)\n </em>\n \",\n <br/>\n \"creDate\" :\n <em>\n  (date of attribute creation)\n </em>\n ,\n <br/>\n \"modDate\" :\n <em>\n  (date of attribute last update)\n </em>\n <br/>\n }, {\n <br/>\n \"name\" : \"RP_Q3\",\n <br/>\n \"type\" : \"kVAR\",\n <br/>\n \"value\" : \"\n <em>\n  (Q3 reactive power expressed in VAR)\n </em>\n \",\n <br/>\n \"creDate\" :\n <em>\n  (date of attribute creation)\n </em>\n ,\n <br/>\n \"modDate\" :\n <em>\n  (date of attribute last update)\n </em>\n <br/>\n }, {\n <br/>\n \"name\" : \"RP_Q4\",\n <br/>\n \"type\" : \"kVAR\",\n <br/>\n \"value\" : \"\n <em>\n  (Q4 reactive power expressed in VAR)\n </em>\n \",\n <br/>\n \"creDate\" :\n <em>\n  (date of attribute creation)\n </em>\n ,\n <br/>\n \"modDate\" :\n <em>\n  (date of attribute last update)\n </em>\n <br/>\n }, {\n <br/>\n \"name\" : \"currentTime\",\n <br/>\n \"type\" : \"sec\",\n <br/>\n \"value\" : \"\n <em>\n  (system date at the moment the data are received by the REST Service)\n </em>\n \",\n <br/>\n \"creDate\" :\n <em>\n  (date of attribute creation)\n </em>\n ,\n <br/>\n \"modDate\" :\n <em>\n  (date of attribute last update)\n </em>\n <br/>\n }],\n <br/>\n \"creDate\" :\n <em>\n  (date of entity creation)\n </em>\n ,\n <br/>\n \"modDate\" :\n <em>\n  (date of entity last update)\n </em>\n <br/>\n }\n</p>\n\n\n<h3>\n How to send \u201cMeter reading\u201d(s) (of type \"Load\")\n</h3>\n\n<p>\n On the other hand, if you want to send a \u201cMeter reading\u201d (of type \"Load\") to ORION, use a REST client such as DHC - REST/HTTP API Client chrome extension (see attached screenshot):\n</p>\n\n<p style=\"text-align:center;\">\n <img alt=\"\" src=\"images/redmine/chrome_M2O_Load_REST_client_screenshot.png\" style=\"width:800px;\"/>\n <br/>\n <strong>\n  Figure 10: Send a \"Meter reading\" (of type \"Load\") to ORION\n </strong>\n</p>\n\n<p>\n Please fill in with the following parametres:\n <br/>\n SERVICE (POST)\n <br/>\n <a class=\"external\" href=\"http://(your\">\n  (your\n </a>\n tomcat ip)/metering-input/rest/loadDataInput/singleLoad\n</p>\n\n<p>\n HEADERS\n <br/>\n Content-Type: application/xml\n</p>\n\n<p>\n BODY\n <br/>\n &lt;load meterId=\"\n <em>\n  (unique identifier of the smart meter for which a measure has been retrieved)\n </em>\n \"\n <br/>\n isConcentrator=\"\n <em>\n  (flag to indicate whether a meter is a concentrator or not)\n </em>\n \"\n <br/>\n sampleNumber=\"\n <em>\n  (a number between 0 and 96 that identifies a range which the load data sample refers to, e.g. 1 identifies the time range 00:00 \u2013 00:15)\n </em>\n \"\n <br/>\n loadSampleDate=\"\n <em>\n  (date, UTC format, when the sample is calculated)\n </em>\n \"\n <br/>\n downstreamActivePowerEEA=\"\n <em>\n  (consumed Active Power EEA in Wh)\n </em>\n \"\n <br/>\n reactiveInductivePowerEEI=\"\n <em>\n  (reactive Inductive Power EEI in VARh)\n </em>\n \"\n <br/>\n reactiveCapacitivePowerEEC=\"\n <em>\n  (reactive Capacitive Power EEC in VARh)\n </em>\n \"\n <br/>\n upstreamActivePowerEUA=\"\n <em>\n  (produced Active Power EUA in Wh)\n </em>\n \"\n <br/>\n reactiveInductivePowerEUI=\"\n <em>\n  (reactive Inductive Power EUI in VARh)\n </em>\n \"\n <br/>\n reactiveCapacitivePowerEUC=\"\n <em>\n  (reactive Capacitive Power EUC in VARh)\n </em>\n \"\n <br/>\n tariffType=\"\n <em>\n  (T1, T2, T3 or T4)\n </em>\n \"\n <br/>\n integrationPeriodRef=\"\n <em>\n  (Q for quarterly sample, H for sample referring to a time range of 30 mins)\n </em>\n \" /&gt;\n</p>\n\n<p>\n and finally click the SEND button.\n</p>\n\n<p>\n If you get 200 OK in the HTTP Response, you should have submitted a \u201cMeter reading\u201d (of type \"Load\") to ORION.\n</p>\n\n<p>\n To verify that a new \u201cMeter reading\u201d (of type \"Load\") has been saved into ORION, an entity of the following type should be created (or updated in case it already exists) in the NoSQL DB underlying ORION (i.e. MongoDB):\n{\n <br/>\n \"_id\" : {\n <br/>\n \"id\" : \"\n <em>\n  (unique identifier of the smart meter for which a measure has been retrieved)\n </em>\n \",\n <br/>\n \"type\" : \"Load\"\n <br/>\n },\n <br/>\n \"attrs\" : [{\n <br/>\n \"name\" : \"isConcentrator\",\n <br/>\n \"type\" : \"boolean\",\n <br/>\n \"value\" : \"\n <em>\n  (flag to indicate whether a smart meter is a concentrator or not)\n </em>\n \",\n <br/>\n \"creDate\" :\n <em>\n  (date of attribute creation)\n </em>\n ,\n <br/>\n \"modDate\" :\n <em>\n  (date of attribute last update)\n </em>\n <br/>\n }, {\n <br/>\n \"name\" : \"sampleNumber\",\n <br/>\n \"type\" : \"int\",\n <br/>\n \"value\" : \"\n <em>\n  (a number between 0 and 96 that identifies a range which the load data sample refers to, e.g. 1 identifies the time range 00:00 \u2013 00:15)\n </em>\n \",\n <br/>\n \"creDate\" :\n <em>\n  (date of attribute creation)\n </em>\n ,\n <br/>\n \"modDate\" :\n <em>\n  (date of attribute last update)\n </em>\n <br/>\n }, {\n <br/>\n \"name\" : \"loadTime\",\n <br/>\n \"type\" : \"sec\",\n <br/>\n \"value\" : \"\n <em>\n  (date, UTC format, when the sample is calculated)\n </em>\n \",\n <br/>\n \"creDate\" :\n <em>\n  (date of attribute creation)\n </em>\n ,\n <br/>\n \"modDate\" :\n <em>\n  (date of attribute last update)\n </em>\n <br/>\n }, {\n <br/>\n \"name\" : \"downstreamActivePowerEEA\",\n <br/>\n \"type\" : \"Wh\",\n <br/>\n \"value\" : \"\n <em>\n  (consumed Active Power EEA in Wh)\n </em>\n \",\n <br/>\n \"creDate\" :\n <em>\n  (date of attribute creation)\n </em>\n ,\n <br/>\n \"modDate\" :\n <em>\n  (date of attribute last update)\n </em>\n <br/>\n }, {\n <br/>\n \"name\" : \"upstreamActivePowerEUA\",\n <br/>\n \"type\" : \"Wh\",\n <br/>\n \"value\" : \"\n <em>\n  (produced Active Power EUA in Wh)\n </em>\n \",\n <br/>\n \"creDate\" :\n <em>\n  (date of attribute creation)\n </em>\n ,\n <br/>\n \"modDate\" :\n <em>\n  (date of attribute last update)\n </em>\n <br/>\n }, {\n <br/>\n \"name\" : \"reactiveInductivePowerEEI\",\n <br/>\n \"type\" : \"VARh\",\n <br/>\n \"value\" : \"\n <em>\n  (reactive Inductive Power EEI in VARh)\n </em>\n \",\n <br/>\n \"creDate\" :\n <em>\n  (date of attribute creation)\n </em>\n ,\n <br/>\n \"modDate\" :\n <em>\n  (date of attribute last update)\n </em>\n <br/>\n }, {\n <br/>\n \"name\" : \"reactiveCapacitivePowerEEC\",\n <br/>\n \"type\" : \"VARh\",\n <br/>\n \"value\" : \"\n <em>\n  (reactive Capacitive Power EEC in VARh)\n </em>\n \",\n <br/>\n \"creDate\" :\n <em>\n  (date of attribute creation)\n </em>\n ,\n <br/>\n \"modDate\" :\n <em>\n  (date of attribute last update)\n </em>\n <br/>\n }, {\n <br/>\n \"name\" : \"reactiveInductivePowerEUI\",\n <br/>\n \"type\" : \"VARh\",\n <br/>\n \"value\" : \"\n <em>\n  (reactive Inductive Power EUI in VARh)\n </em>\n \",\n <br/>\n \"creDate\" :\n <em>\n  (date of attribute creation)\n </em>\n ,\n <br/>\n \"modDate\" :\n <em>\n  (date of attribute last update)\n </em>\n <br/>\n }, {\n <br/>\n \"name\" : \"reactiveCapacitivePowerEUC\",\n <br/>\n \"type\" : \"VARh\",\n <br/>\n \"value\" : \"\n <em>\n  (reactive Capacitive Power EUC in VARh)\n </em>\n \",\n <br/>\n \"creDate\" :\n <em>\n  (date of attribute creation)\n </em>\n ,\n <br/>\n \"modDate\" :\n <em>\n  (date of attribute last update)\n </em>\n <br/>\n }, {\n <br/>\n \"name\" : \"tariffType\",\n <br/>\n \"type\" : \"string\",\n <br/>\n \"value\" : \"\n <em>\n  (T1, T2, T3 or T4)\n </em>\n \",\n <br/>\n \"creDate\" :\n <em>\n  (date of attribute creation)\n </em>\n ,\n <br/>\n \"modDate\" :\n <em>\n  (date of attribute last update)\n </em>\n <br/>\n }, {\n <br/>\n \"name\" : \"integrationPeriodRef\",\n <br/>\n \"type\" : \"string\",\n <br/>\n \"value\" : \"\n <em>\n  (Q for quarterly sample, H for sample referring to a time range of 30 mins)\n </em>\n \",\n <br/>\n \"creDate\" :\n <em>\n  (date of attribute creation)\n </em>\n ,\n <br/>\n \"modDate\" :\n <em>\n  (date of attribute last update)\n </em>\n <br/>\n }, {\n <br/>\n \"name\" : \"currentTime\",\n <br/>\n \"type\" : \"sec\",\n <br/>\n \"value\" : \"\n <em>\n  (system date at the moment the data are received by the REST Service)\n </em>\n \",\n <br/>\n \"creDate\" :\n <em>\n  (date of attribute creation)\n </em>\n ,\n <br/>\n \"modDate\" :\n <em>\n  (date of attribute last update)\n </em>\n <br/>\n }],\n <br/>\n \"creDate\" :\n <em>\n  (date of entity creation)\n </em>\n ,\n <br/>\n \"modDate\" :\n <em>\n  (date of entity last update)\n </em>\n <br/>\n }\n</p>\n\n\n<h3>\n Metering2Orion (Java client named \"metering-input-client\")\n</h3>\n\n<p>\n Download the artefact (in the form a .jar file) from the bottom of the page.\n <br/>\n The\n <strong>\n  metering-input-client\n </strong>\n module contains a java utility class that has to be referenced as an external library (in a software development java project within a development environment such as Eclipse) in order to let an external application interact with the\n <strong>\n  metering-input\n </strong>\n REST service described in the previous paragraph.\n</p>\n\n\n<h3>\n How to send \u201cMeter reading\u201d(s) (of type \"Meter\")\n</h3>\n\n<p>\n Before sending the first consumption/production power measure a Meter \u201centity\u201d needs to be registered by using the registerMeter method. Here is an example of registering a \u201cMeter\u201d entity with meterId equal to \"XXXmeterId\":\n</p>\n\n<pre><code>MeteringProxy meteringProxy = new MeteringProxyImpl();<br/>        Meter meter = new Meter(\"XXXmeterId\", false);<br/>        meteringProxy.registerMeter(meter);</code></pre>\n\n<p>\n Hereafter there is a code snippet which shows how to send a meter reading (of type \"Meter\") for the \u201cMeter\u201d entity that has been previously registered:\n</p>\n\n<pre><code>Meter meter = new Meter(<br/>        \"XXXmeterId\",                // smart meter unique identifier<br/>        false,                                    // this meter is not a concentrator<br/>        System.currentTimeMillis() / 1000,    // timestamp of the moment when data are sent to the REST Service    <br/>        12.3,                    // upstreamActivePower<br/>        123,                     // downstreamActivePower<br/>        456,                    // reactivePowerQ1<br/>        789,                             // reactivePowerQ2<br/>        123,                    // reactivePowerQ3<br/>        45);                            // reactivePowerQ4</code></pre>\n\n<pre><code>Response response = meteringProxy.sendMeterData(meter);<br/>        if(response.getStatus == 200)<br/>            System.out.println(\u201cEverything is fine!\u201d);</code></pre>\n\n\n<h3>\n How to send \u201cMeter reading\u201d(s) (of type \"Load\")\n</h3>\n\n<p>\n Before sending the first cumulative load data sample, a Load \u201centity\u201d needs to be registered by using the registerLoad method. Here is an example of registering a \u201cLoad\u201d entity with meterId equal to \"XXXmeterId\":\n</p>\n\n<pre><code>MeteringProxy meteringProxy = new MeteringProxyImpl();<br/>        Load load = new Load(\"XXXmeterId\", false);<br/>        meteringProxy.registerLoad(load);</code></pre>\n\n<p>\n Hereafter there is a code snippet which shows how to send a meter reading (of type \"Load\"), a load sample, for the \u201cLoad\u201d entity that has been previously registered:\n</p>\n\n<pre><code>meteringProxy = new MeteringProxyImpl();<br/>        Load load = null;<br/>        load=new Load(\"55555555555\",false);<br/>        load.setSampleNumber(5);<br/>        load.setDownstreamActivePowerEEA(1000.0); //consumed power<br/>        load.setUpstreamActivePowerEUA(10.0); //produced power<br/>        load.setIntegrationPeriodRef(\"Q\");<br/>        load.setLoadSampleDate(Calendar.getInstance().getTime());<br/>        load.setReactiveCapacitivePowerEEC(10.0);<br/>        load.setReactiveCapacitivePowerEUC(0.0);<br/>        load.setReactiveInductivePowerEEI(0.0);<br/>        load.setReactiveInductivePowerEUI(0.0);<br/>        load.setTariffType(\"T1\");<br/>        load.setCurrentTime(System.currentTimeMillis() / 1000);</code></pre>\n\n<pre><code>Response response = meteringProxy.sendLoadData(load);<br/>        if(response.getStatus == 200)<br/>            System.out.println(\u201cEverything is fine!\u201d);</code></pre>\n\n\n<h3>\n Address/Protocol\n</h3>\n\n\n<h3>\n Commands\n</h3>\n\n\n<h3>\n Endpoints\n</h3>\n\n\n",
            "Preface": "\n<p>\n Within this document you find a self-contained open specification of the aforementioned Domain Specific Enabler (DSE).\n</p>\n\n<p>\n Please consult the appropriate pages on the\n <a class=\"external\" href=\"http://www.finesce.eu/Trial_Site_Terni.html\">\n  FINESCE\n </a>\n website in order to understand the complete context of the related FINESCE trials and this DSE.\n</p>\n\n\n",
            "ReutilisedTech": "\n<p>\n Jersey - RESTful Web Services in Java (\n <a class=\"external\" href=\"https://jersey.java.net/\">\n </a>\n )\n</p>\n\n\n"
        },
        "WP": "",
        "Terms and Conditions": "\n<p>\n Software associated to the Metering2Orion product is provided as open source under the Apache2 license. Please check the specific terms and conditions linked to this open source license at\n <a class=\"external\" href=\"http://www.apache.org/licenses/LICENSE-2.0\">\n  LICENSE-2.0\n </a>\n</p>\n\n\n",
        "wiki_attachments": [
            "/redmine/attachments/download/1941/metering-input_deploy.jpg",
            "/redmine/attachments/download/1942/rest_meter.jpg",
            "/redmine/attachments/download/1943/chrome_M2O_Meter_REST_client_screenshot.png",
            "/redmine/attachments/download/1957/rest_load.jpg",
            "/redmine/attachments/download/1959/chrome_M2O_Load_REST_client_screenshot.png",
            "/redmine/attachments/download/2095/meter.png",
            "/redmine/attachments/download/2096/load.png",
            "/redmine/attachments/download/2097/metering-input-client.png",
            "/redmine/attachments/download/2098/metering-input-server_METER.png",
            "/redmine/attachments/download/2099/metering-input-server_LOAD.png",
            "/redmine/attachments/download/2263/metering-input.war",
            "/redmine/attachments/download/2264/metering-input-client-0.0.9-SNAPSHOT.jar",
            "/redmine/attachments/download/2265/metering-input-client-0.0.9-SNAPSHOT-sources.jar"
        ],
        "Open Source": "",
        "Contact Person": "\n<p>\n Massimiliano Nigrelli (Engineering Ingegneria Informatica S.p.A.) -\n <a class=\"email\" href=\"mailto:massimiliano.nigrelliREMOVE-NO-SPAM@eng.it\">\n  massimiliano.nigrelliREMOVE-NO-SPAM@eng.it\n </a>\n <br/>\n Leandro Lombardo (Engineering Ingegneria Informatica S.p.A.) -\n <a class=\"email\" href=\"mailto:leandro.lombardoREMOVE-NO-SPAM@eng.it\">\n  leandro.lombardoREMOVE-NO-SPAM@eng.it\n </a>\n <br/>\n Dario Pellegrino (Engineering Ingegneria Informatica S.p.A.) -\n <a class=\"email\" href=\"mailto:dario.pellegrinoREMOVE-NO-SPAM@eng.it\">\n  dario.pellegrinoREMOVE-NO-SPAM@eng.it\n </a>\n</p>\n\n",
        "Overview": "\n\n<h3>\n What you get\n</h3>\n\n\n\nMetering2Orion consists of:\n\t<ul>\n <li>\n  a REST service (developed in Java) which allow clients (e.g. DSOs) to register data about metering and load profile in a specific area into an instance of ORION Context Broker GE;\n </li>\n <li>\n  a Java client which accepts data about metering and load profile coming from the smart meters (via either an IoT gateway or an existing legacy system) and then \u201cpasses\u201d the data to the above mentioned REST service.\n </li>\n</ul>\n\n\n<h3>\n Why to get it\n</h3>\n\n<p>\n A reference implementation of\n <em>\n  a client + a REST service\n </em>\n by which smart meter readings can be \"delivered\" to an instance of ORION.\n</p>\n\n\n<h3>\n Open Specifications\n</h3>\n\n\n<h3>\n Target Usage\n</h3>\n\n<ul>\n <li>\n  DSOs which need information on metering and load profile in a specific area\n </li>\n <li>\n  Third-party applications (such as those developed by SMEs involved in Phase3)\n </li>\n</ul>\n\n\n",
        "Downloads": "\n<table class=\"themed\">\n <tr class=\"top\">\n  <td>\n   Location\n  </td>\n  <td>\n   Revision\n  </td>\n  <td>\n   Release Date\n  </td>\n </tr>\n <tr>\n  <td>\n   <a class=\"external\" href=\"files/metering-input.war\">\n    metering-input.war\n   </a>\n  </td>\n  <td>\n   version=0.0.9-SNAPSHOT\n  </td>\n  <td>\n   Tue Feb 24th 11:47:00 CET 2015\n  </td>\n </tr>\n <tr>\n  <td>\n   <a class=\"external\" href=\"files/metering-input-client-0.0.9-SNAPSHOT.jar\">\n    metering-input-client-0.0.9-SNAPSHOT.jar\n   </a>\n  </td>\n  <td>\n   version=0.0.9-SNAPSHOT\n  </td>\n  <td>\n   Tue Feb 24th 11:47:00 CET 2015\n  </td>\n </tr>\n <tr>\n  <td>\n   <a class=\"external\" href=\"files/metering-input-client-0.0.9-SNAPSHOT-sources.jar\">\n    metering-input-client-0.0.9-SNAPSHOT-sources.jar\n   </a>\n  </td>\n  <td>\n   version=0.0.9-SNAPSHOT\n  </td>\n  <td>\n   Tue Feb 24th 11:47:00 CET 2015\n  </td>\n </tr>\n</table>\n\n\n",
        "Instances": "\n<p>\n An instance of this DSE reference implementation runs as a part of the trial and is not publicly accessible.\n</p>\n\n\n"
    }
]